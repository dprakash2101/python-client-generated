# coding: utf-8

"""
    KCrud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'nick_name': 'str',
        'age': 'int',
        'date_time_created': 'datetime',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'nick_name': 'nickName',
        'age': 'age',
        'date_time_created': 'dateTimeCreated',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, id=None, first_name=None, last_name=None, nick_name=None, age=None, date_time_created=None, is_deleted=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._nick_name = None
        self._age = None
        self._date_time_created = None
        self._is_deleted = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if nick_name is not None:
            self.nick_name = nick_name
        if age is not None:
            self.age = age
        if date_time_created is not None:
            self.date_time_created = date_time_created
        if is_deleted is not None:
            self.is_deleted = is_deleted

    @property
    def id(self):
        """Gets the id of this Contact.  # noqa: E501


        :return: The id of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Contact.  # noqa: E501


        :return: The first_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Contact.  # noqa: E501


        :return: The last_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def nick_name(self):
        """Gets the nick_name of this Contact.  # noqa: E501


        :return: The nick_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this Contact.


        :param nick_name: The nick_name of this Contact.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def age(self):
        """Gets the age of this Contact.  # noqa: E501


        :return: The age of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Contact.


        :param age: The age of this Contact.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def date_time_created(self):
        """Gets the date_time_created of this Contact.  # noqa: E501


        :return: The date_time_created of this Contact.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time_created

    @date_time_created.setter
    def date_time_created(self, date_time_created):
        """Sets the date_time_created of this Contact.


        :param date_time_created: The date_time_created of this Contact.  # noqa: E501
        :type: datetime
        """

        self._date_time_created = date_time_created

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Contact.  # noqa: E501


        :return: The is_deleted of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Contact.


        :param is_deleted: The is_deleted of this Contact.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
